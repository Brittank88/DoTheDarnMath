//file:noinspection HardCodedStringLiteral

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("com.guardsquare:proguard-gradle:7.2.1") {
            exclude(group: "com.android.tools.build")
        }
    }
}

plugins {
    id("fabric-loom").version("0.11-SNAPSHOT")
    id("maven-publish")
    id("com.github.johnrengelman.shadow") version("7.1.2")
}

version = project.mod_version
group = project.maven_group

boolean IS_RELEASE = System.getenv("BUILD_MODE") == "release"

repositories {
    mavenCentral()

    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
}

dependencies {

    // To change the versions see the gradle.properties file
    minecraft("com.mojang:minecraft:${project.minecraft_version}")
    mappings("net.fabricmc:yarn:${project.yarn_mappings}:v2")
    modImplementation("net.fabricmc:fabric-loader:${project.loader_version}")

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}")

    // https://mvnrepository.com/artifact/org.mariuszgromada.math/MathParser.org-mXparser
    shadow(implementation("org.mariuszgromada.math:MathParser.org-mXparser:${project.mXparser_version}"))
}

processResources {
    inputs.property("version", project.version)
    filteringCharset("UTF-8")

    filesMatching("fabric.mod.json") {
        expand("version": project.version)
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        //noinspection GroovyAssignabilityCheck, GroovyAccessibility
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        //noinspection GroovyAssignabilityCheck
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

shadowJar {
    archiveClassifier.set("shadowed")
    configurations = [project.configurations.shadow]
    relocate("org.mariuszgromada", "shadow.org.mariuszgromada")
}

//noinspection UnnecessaryQualifiedReference
task proguardJar(type: proguard.gradle.ProGuardTask, dependsOn: shadowJar) {

    onlyIf { IS_RELEASE }

    Map<String, String> MODULE_INFO_CLASS_FILTER = new HashMap<String, String>(1) {{ put("filter", "!module-info.class") }}

    // NOTE: The "code/allocation/variable" optimisation (see: https://www.guardsquare.com/manual/configuration/optimizations) breaks remapJar.
    // NOTE: The "code/optimisation/string" optimisation (see: https://www.guardsquare.com/manual/configuration/optimizations) causes issues.
    //       See: https://stackoverflow.com/questions/65718704/proguard-overflow-of-unsigned-short-value
    // NOTE: All annotations must be kept, or @Mixin and similar are lost.
    configuration("proguard-rules.pro")

    libraryjars(
            new HashMap<String, String>(2) {{
                putAll(MODULE_INFO_CLASS_FILTER)
                put("jarfilter", "!**.jar")
            }},
            fileTree("${System.getenv("JAVA_HOME")}/jmods").matching { include("java.base.jmod") }.getSingleFile()
    )
    libraryjars(MODULE_INFO_CLASS_FILTER, project.configurations.runtimeClasspath )

    File shadowedJar = shadowJar.archiveFile.get().asFile
    injars(shadowedJar)
    outjars("${buildDir}/tmp/${shadowedJar.getName()}")
}

prepareRemapJar {
    dependsOn(proguardJar)
}

remapJar {
    if (IS_RELEASE) inputFile.set(proguardJar.outJarFileCollection.singleFile)
    else inputFile.set(shadowJar.archiveFile.get().asFile)
}

// configure the maven publication
publishing {
    publications {
        //noinspection GroovyAssignabilityCheck
        mavenJava(MavenPublication) {
            //noinspection GroovyAssignabilityCheck
            from(components.java)
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}

